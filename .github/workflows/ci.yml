name: FastAPI Book Project CI/CD
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run tests
        run: |
          pytest

  deploy:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Build Docker image
        run: docker build -t fastapi-app .
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Deploy with verification steps
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$HOST '
            cd uthy-fast-api-project &&
            git pull &&
            
            # Stop containers
            docker-compose down &&
            
            # Prune old images and containers
            docker system prune -f &&
            
            # Start services
            docker-compose up -d --build &&
            
            # Wait for services to be ready
            echo "Waiting for services to start..." &&
            sleep 20 &&
            
            # Verify deployments
            if ! curl -s -f http://localhost/healthcheck; then
              echo "Healthcheck failed"
              exit 1
            fi &&
            
            # Verify nginx logs for any errors
            if docker-compose logs nginx | grep -i error; then
              echo "Found errors in nginx logs"
              docker-compose logs nginx
              exit 1
            fi &&
            
            echo "Deployment verified successfully"
          '
          
      - name: Verify Deployment
        env:
          HOST: ${{ secrets.EC2_HOST }}
        run: |
          # Wait for DNS propagation and services to be fully ready
          sleep 30
          
          # Make HTTP request to verify deployment
          curl -v http://$HOST/healthcheck
          
          echo "Deployment verification completed"
