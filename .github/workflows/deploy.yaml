name: FastAPI Book Project CI/CD
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run tests
        run: |
          pytest

  deploy:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$HOST '
            cd uthy-fast-api-project
            
            echo "=== Pulling Latest Code ==="
            git fetch origin
            git reset --hard origin/main
            
            echo "=== Stopping and Cleaning ==="
            docker-compose down --remove-orphans
            docker system prune -af --volumes
            
            echo "=== Rebuilding and Starting ==="
            docker-compose build --no-cache
            docker-compose up -d
            
            echo "=== Waiting for Services ==="
            sleep 30
            
            echo "=== Verifying Deployment ==="
            # Check if containers are running
            if ! docker-compose ps | grep "Up"; then
              echo "Containers failed to start"
              docker-compose logs
              exit 1
            fi
            
            echo "=== Testing Required Endpoints ==="
            # Test healthcheck (required)
            if ! curl -s -f http://localhost/healthcheck; then
              echo "Healthcheck failed"
              docker-compose logs
              exit 1
            fi
            
            # Test stage2 endpoint (optional)
            echo "Testing stage2 endpoint (optional)..."
            STAGE2_RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost/stage2)
            HTTP_CODE=$(echo "$STAGE2_RESPONSE" | tail -n1)
            if [ "$HTTP_CODE" = "200" ]; then
              echo "Stage2 endpoint is available"
            else
              echo "Stage2 endpoint not found (this is okay if not added by bot)"
            fi
            
            echo "=== Recent Logs ==="
            docker-compose logs --tail=20
          '
          
      - name: Final Verification
        env:
          HOST: ${{ secrets.EC2_HOST }}
        run: |
          sleep 10
          # Only verify the required healthcheck endpoint
          curl -v http://$HOST/healthcheck
