name: FastAPI Book Project CI/CD
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run tests
        run: |
          pytest

  deploy:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Build Docker image
        run: docker build -t fastapi-app .
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$HOST '
            cd uthy-fast-api-project &&
            
            # Show current state
            echo "Current main.py content:" &&
            cat main.py &&
            
            # Pull and verify
            git pull &&
            sleep 5 &&
            echo "Updated main.py content:" &&
            cat main.py &&
            
            # Clean and rebuild
            docker-compose down --remove-orphans &&
            docker system prune -f &&
            docker-compose build --no-cache &&
            docker-compose up -d &&
            
            # Wait for services
            echo "Waiting for services to start..." &&
            sleep 20 &&
            
            # Verify containers
            echo "Checking running containers:" &&
            docker ps &&
            
            # Verify healthcheck
            if ! curl -s -f http://localhost/healthcheck; then
                echo "Healthcheck failed"
                docker-compose logs
                exit 1
            fi &&
            
            # Verify stage2 endpoint
            echo "Verifying stage2 endpoint..." &&
            if ! curl -s -f http://localhost/stage2; then
                echo "Stage2 endpoint verification failed"
                echo "App logs:"
                docker-compose logs app
                echo "Nginx logs:"
                docker-compose logs nginx
            fi &&
            
            # Show final logs
            echo "Final container logs:" &&
            docker-compose logs --tail=20 &&
            
            echo "Deployment verification completed"
          '
          
      - name: Verify Deployment
        env:
          HOST: ${{ secrets.EC2_HOST }}
        run: |
          sleep 30
          curl -v http://$HOST/healthcheck
          echo "Deployment verification completed"
